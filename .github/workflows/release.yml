name: Release

on:
  push:
    tags:
      - 'v*.*.*'

permissions:
  contents: write

env:
  CARGO_TERM_COLOR: always

jobs:
  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
      version: ${{ steps.get_version.outputs.version }}
    steps:
      - name: Get version from tag
        id: get_version
        run: echo "version=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT

      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Generate changelog
        id: changelog
        run: |
          # Get previous tag
          PREV_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")

          if [ -z "$PREV_TAG" ]; then
            # First release - get all commits
            CHANGELOG=$(git log --pretty=format:"- %s (%h)" --no-merges)
          else
            # Get commits since last tag
            CHANGELOG=$(git log ${PREV_TAG}..HEAD --pretty=format:"- %s (%h)" --no-merges)
          fi

          # Save to file
          echo "## What's Changed" > CHANGELOG.md
          echo "" >> CHANGELOG.md
          echo "$CHANGELOG" >> CHANGELOG.md

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ steps.get_version.outputs.version }}
          body_path: CHANGELOG.md
          draft: false
          prerelease: ${{ contains(github.ref, 'alpha') || contains(github.ref, 'beta') || contains(github.ref, 'rc') }}

  build-linux:
    name: Build Linux
    needs: create-release
    runs-on: ubuntu-latest
    strategy:
      matrix:
        target:
          - x86_64-unknown-linux-gnu
          - x86_64-unknown-linux-musl  # Static binary
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Install musl tools
        if: matrix.target == 'x86_64-unknown-linux-musl'
        run: sudo apt-get update && sudo apt-get install -y musl-tools

      - name: Cache cargo registry
        uses: actions/cache@v3
        with:
          path: ~/.cargo/registry
          key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}

      - name: Cache cargo index
        uses: actions/cache@v3
        with:
          path: ~/.cargo/git
          key: ${{ runner.os }}-cargo-git-${{ hashFiles('**/Cargo.lock') }}

      - name: Cache target directory
        uses: actions/cache@v3
        with:
          path: target
          key: ${{ runner.os }}-${{ matrix.target }}-target-${{ hashFiles('**/Cargo.lock') }}

      - name: Build release binary
        run: cargo build --release --target ${{ matrix.target }}

      - name: Strip binary
        run: strip target/${{ matrix.target }}/release/learnp

      - name: Create tarball
        run: |
          cd target/${{ matrix.target }}/release
          tar czf learnp-${{ needs.create-release.outputs.version }}-${{ matrix.target }}.tar.gz learnp
          mv learnp-${{ needs.create-release.outputs.version }}-${{ matrix.target }}.tar.gz ../../../

      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: ./learnp-${{ needs.create-release.outputs.version }}-${{ matrix.target }}.tar.gz
          asset_name: learnp-${{ needs.create-release.outputs.version }}-${{ matrix.target }}.tar.gz
          asset_content_type: application/gzip

  build-deb:
    name: Build Debian Package
    needs: create-release
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Install cargo-deb
        run: cargo install cargo-deb

      - name: Build deb package
        run: cargo deb

      - name: Upload Debian Package
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: ./target/debian/learnp_${{ needs.create-release.outputs.version }}_amd64.deb
          asset_name: learnp_${{ needs.create-release.outputs.version }}_amd64.deb
          asset_content_type: application/vnd.debian.binary-package

  build-rpm:
    name: Build RPM Package
    needs: create-release
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Install cargo-generate-rpm
        run: cargo install cargo-generate-rpm

      - name: Build binary
        run: cargo build --release

      - name: Generate RPM
        run: cargo generate-rpm

      - name: Upload RPM Package
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: ./target/generate-rpm/learnp-${{ needs.create-release.outputs.version }}-1.x86_64.rpm
          asset_name: learnp-${{ needs.create-release.outputs.version }}-1.x86_64.rpm
          asset_content_type: application/x-rpm

  build-appimage:
    name: Build AppImage
    needs: create-release
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Build release binary
        run: cargo build --release

      - name: Download AppImage tools
        run: |
          wget https://github.com/linuxdeploy/linuxdeploy/releases/download/continuous/linuxdeploy-x86_64.AppImage
          chmod +x linuxdeploy-x86_64.AppImage

      - name: Create AppDir structure
        run: |
          mkdir -p AppDir/usr/bin
          cp target/release/learnp AppDir/usr/bin/

          # Create desktop file
          mkdir -p AppDir/usr/share/applications
          cat > AppDir/usr/share/applications/learnp.desktop << EOF
          [Desktop Entry]
          Name=Learn Programming
          Exec=learnp
          Icon=learnp
          Type=Application
          Categories=Development;Education;
          Terminal=true
          EOF

          # Create icon (placeholder - you should provide actual icon)
          mkdir -p AppDir/usr/share/icons/hicolor/256x256/apps
          # TODO: Add actual icon file here

      - name: Build AppImage
        run: |
          ./linuxdeploy-x86_64.AppImage --appdir AppDir --output appimage
          mv Learn_Programming-*.AppImage learnp-${{ needs.create-release.outputs.version }}-x86_64.AppImage

      - name: Upload AppImage
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: ./learnp-${{ needs.create-release.outputs.version }}-x86_64.AppImage
          asset_name: learnp-${{ needs.create-release.outputs.version }}-x86_64.AppImage
          asset_content_type: application/x-executable

  build-windows:
    name: Build Windows
    needs: create-release
    runs-on: windows-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: x86_64-pc-windows-msvc

      - name: Cache cargo registry
        uses: actions/cache@v3
        with:
          path: ~/.cargo/registry
          key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}

      - name: Cache cargo index
        uses: actions/cache@v3
        with:
          path: ~/.cargo/git
          key: ${{ runner.os }}-cargo-git-${{ hashFiles('**/Cargo.lock') }}

      - name: Cache target directory
        uses: actions/cache@v3
        with:
          path: target
          key: ${{ runner.os }}-target-${{ hashFiles('**/Cargo.lock') }}

      - name: Build release binary
        run: cargo build --release --target x86_64-pc-windows-msvc

      - name: Create ZIP archive
        run: |
          cd target/x86_64-pc-windows-msvc/release
          7z a ../../../learnp-${{ needs.create-release.outputs.version }}-x86_64-windows.zip learnp.exe

      - name: Upload Windows Binary (ZIP)
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: ./learnp-${{ needs.create-release.outputs.version }}-x86_64-windows.zip
          asset_name: learnp-${{ needs.create-release.outputs.version }}-x86_64-windows.zip
          asset_content_type: application/zip

  build-windows-installer:
    name: Build Windows Installer
    needs: create-release
    runs-on: windows-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Install cargo-wix
        run: cargo install cargo-wix

      - name: Build release binary
        run: cargo build --release

      - name: Create WiX installer
        run: cargo wix --nocapture

      - name: Upload Windows Installer (MSI)
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: ./target/wix/learnp-${{ needs.create-release.outputs.version }}-x86_64.msi
          asset_name: learnp-${{ needs.create-release.outputs.version }}-x86_64.msi
          asset_content_type: application/x-msi

  build-macos:
    name: Build macOS
    needs: create-release
    runs-on: macos-latest
    strategy:
      matrix:
        target:
          - x86_64-apple-darwin
          - aarch64-apple-darwin
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Cache cargo registry
        uses: actions/cache@v3
        with:
          path: ~/.cargo/registry
          key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}

      - name: Cache cargo index
        uses: actions/cache@v3
        with:
          path: ~/.cargo/git
          key: ${{ runner.os }}-cargo-git-${{ hashFiles('**/Cargo.lock') }}

      - name: Cache target directory
        uses: actions/cache@v3
        with:
          path: target
          key: ${{ runner.os }}-${{ matrix.target }}-target-${{ hashFiles('**/Cargo.lock') }}

      - name: Build release binary
        run: cargo build --release --target ${{ matrix.target }}

      - name: Strip binary
        run: strip target/${{ matrix.target }}/release/learnp

      - name: Create tarball
        run: |
          cd target/${{ matrix.target }}/release
          tar czf learnp-${{ needs.create-release.outputs.version }}-${{ matrix.target }}.tar.gz learnp
          mv learnp-${{ needs.create-release.outputs.version }}-${{ matrix.target }}.tar.gz ../../../

      - name: Upload macOS Binary
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: ./learnp-${{ needs.create-release.outputs.version }}-${{ matrix.target }}.tar.gz
          asset_name: learnp-${{ needs.create-release.outputs.version }}-${{ matrix.target }}.tar.gz
          asset_content_type: application/gzip

  build-macos-universal:
    name: Build macOS Universal Binary
    needs: [create-release, build-macos]
    runs-on: macos-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: x86_64-apple-darwin,aarch64-apple-darwin

      - name: Build both architectures
        run: |
          cargo build --release --target x86_64-apple-darwin
          cargo build --release --target aarch64-apple-darwin

      - name: Create universal binary
        run: |
          lipo -create \
            target/x86_64-apple-darwin/release/learnp \
            target/aarch64-apple-darwin/release/learnp \
            -output learnp-universal
          strip learnp-universal

      - name: Create tarball
        run: |
          tar czf learnp-${{ needs.create-release.outputs.version }}-universal-apple-darwin.tar.gz learnp-universal

      - name: Upload macOS Universal Binary
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: ./learnp-${{ needs.create-release.outputs.version }}-universal-apple-darwin.tar.gz
          asset_name: learnp-${{ needs.create-release.outputs.version }}-universal-apple-darwin.tar.gz
          asset_content_type: application/gzip
