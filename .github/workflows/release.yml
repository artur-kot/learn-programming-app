name: Build and Release

on:
  push:
    branches:
      - main

permissions:
  contents: write

jobs:
  build:
    name: Build and Release
    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Build Electron app
        run: npm run make
        env:
          NODE_ENV: production

      - name: Get package version
        id: package_version
        shell: bash
        run: |
          VERSION=$(node -p "require('./package.json').version")
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Version: $VERSION"

      - name: Get current date
        id: date
        shell: bash
        run: echo "date=$(date +'%Y%m%d-%H%M%S')" >> $GITHUB_OUTPUT

      - name: Create Release Tag
        id: create_release_tag
        shell: bash
        run: |
          TAG="v${{ steps.package_version.outputs.version }}-${{ steps.date.outputs.date }}"
          echo "tag=$TAG" >> $GITHUB_OUTPUT
          echo "Release tag: $TAG"

      - name: Upload artifacts (Linux)
        if: matrix.os == 'ubuntu-latest'
        uses: actions/upload-artifact@v4
        with:
          name: linux-artifacts
          path: |
            out/make/**/*.deb
            out/make/**/*.rpm
          retention-days: 7

      - name: Upload artifacts (Windows)
        if: matrix.os == 'windows-latest'
        uses: actions/upload-artifact@v4
        with:
          name: windows-artifacts
          path: |
            out/make/**/*.exe
            out/make/**/*.nupkg
          retention-days: 7

      - name: Upload artifacts (macOS)
        if: matrix.os == 'macos-latest'
        uses: actions/upload-artifact@v4
        with:
          name: macos-artifacts
          path: |
            out/make/**/*.dmg
            out/make/**/*.zip
          retention-days: 7

  release:
    name: Create Release
    needs: build
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Get package version
        id: package_version
        run: |
          VERSION=$(node -p "require('./package.json').version")
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Get current date
        id: date
        run: echo "date=$(date +'%Y%m%d-%H%M%S')" >> $GITHUB_OUTPUT

      - name: Create Release Tag
        id: create_release_tag
        run: |
          TAG="v${{ steps.package_version.outputs.version }}-${{ steps.date.outputs.date }}"
          echo "tag=$TAG" >> $GITHUB_OUTPUT

      - name: Download Linux artifacts
        uses: actions/download-artifact@v4
        with:
          name: linux-artifacts
          path: ./release-artifacts/linux

      - name: Download Windows artifacts
        uses: actions/download-artifact@v4
        with:
          name: windows-artifacts
          path: ./release-artifacts/windows

      - name: Download macOS artifacts
        uses: actions/download-artifact@v4
        with:
          name: macos-artifacts
          path: ./release-artifacts/macos

      - name: Display structure of downloaded files
        run: ls -R ./release-artifacts

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.create_release_tag.outputs.tag }}
          name: Release ${{ steps.create_release_tag.outputs.tag }}
          draft: false
          prerelease: false
          generate_release_notes: true
          files: |
            release-artifacts/linux/**/*
            release-artifacts/windows/**/*
            release-artifacts/macos/**/*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
