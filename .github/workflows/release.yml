name: Release

on:
  push:
    tags:
      - 'v*.*.*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., 0.1.0)'
        required: true
        type: string
      prerelease:
        description: 'Mark as pre-release'
        required: false
        type: boolean
        default: false

permissions:
  contents: write

env:
  CARGO_TERM_COLOR: always

jobs:
  get-version:
    name: Get Version
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.get_version.outputs.version }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get version
        id: get_version
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            # Manual trigger - use input version
            echo "version=${{ inputs.version }}" >> $GITHUB_OUTPUT
          else
            # Tag trigger - extract from tag
            echo "version=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT
          fi

      - name: Create or update tag (manual workflow only)
        if: github.event_name == 'workflow_dispatch'
        run: |
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"
          git tag -a "v${{ steps.get_version.outputs.version }}" -m "Release v${{ steps.get_version.outputs.version }}"
          git push origin "v${{ steps.get_version.outputs.version }}"

  build-linux:
    name: Build Linux
    needs: get-version
    runs-on: ubuntu-latest
    strategy:
      matrix:
        target:
          - x86_64-unknown-linux-gnu
          - x86_64-unknown-linux-musl  # Static binary
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Install musl tools
        if: matrix.target == 'x86_64-unknown-linux-musl'
        run: sudo apt-get update && sudo apt-get install -y musl-tools

      - name: Cache cargo registry
        uses: actions/cache@v3
        with:
          path: ~/.cargo/registry
          key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}

      - name: Cache cargo index
        uses: actions/cache@v3
        with:
          path: ~/.cargo/git
          key: ${{ runner.os }}-cargo-git-${{ hashFiles('**/Cargo.lock') }}

      - name: Cache target directory
        uses: actions/cache@v3
        with:
          path: target
          key: ${{ runner.os }}-${{ matrix.target }}-target-${{ hashFiles('**/Cargo.lock') }}

      - name: Build release binary
        run: |
          if [ "${{ matrix.target }}" = "x86_64-unknown-linux-musl" ]; then
            cargo build --release --target ${{ matrix.target }} --features vendored-openssl
          else
            cargo build --release --target ${{ matrix.target }}
          fi

      - name: Strip binary
        run: strip target/${{ matrix.target }}/release/learnp

      - name: Create tarball
        run: |
          cd target/${{ matrix.target }}/release
          tar czf learnp-${{ needs.get-version.outputs.version }}-${{ matrix.target }}.tar.gz learnp
          mv learnp-${{ needs.get-version.outputs.version }}-${{ matrix.target }}.tar.gz ../../../

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: linux-${{ matrix.target }}
          path: ./learnp-${{ needs.get-version.outputs.version }}-${{ matrix.target }}.tar.gz
          retention-days: 1

  build-deb:
    name: Build Debian Package
    needs: get-version
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Install cargo-deb
        run: cargo install cargo-deb

      - name: Build deb package
        run: cargo deb

      - name: Find deb file
        id: find_deb
        run: |
          DEB_FILE=$(ls target/debian/*.deb | head -1)
          DEB_NAME=$(basename "$DEB_FILE")
          echo "path=$DEB_FILE" >> $GITHUB_OUTPUT
          echo "name=$DEB_NAME" >> $GITHUB_OUTPUT

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: debian-package
          path: ${{ steps.find_deb.outputs.path }}
          retention-days: 1

  build-rpm:
    name: Build RPM Package
    needs: get-version
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Install cargo-generate-rpm
        run: cargo install cargo-generate-rpm

      - name: Build binary
        run: cargo build --release

      - name: Generate RPM
        run: cargo generate-rpm

      - name: Find RPM file
        id: find_rpm
        run: |
          RPM_FILE=$(ls target/generate-rpm/*.rpm | head -1)
          RPM_NAME=$(basename "$RPM_FILE")
          echo "path=$RPM_FILE" >> $GITHUB_OUTPUT
          echo "name=$RPM_NAME" >> $GITHUB_OUTPUT

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: rpm-package
          path: ${{ steps.find_rpm.outputs.path }}
          retention-days: 1

  build-windows:
    name: Build Windows
    needs: get-version
    runs-on: windows-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: x86_64-pc-windows-msvc

      - name: Cache cargo registry
        uses: actions/cache@v3
        with:
          path: ~/.cargo/registry
          key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}

      - name: Cache cargo index
        uses: actions/cache@v3
        with:
          path: ~/.cargo/git
          key: ${{ runner.os }}-cargo-git-${{ hashFiles('**/Cargo.lock') }}

      - name: Cache target directory
        uses: actions/cache@v3
        with:
          path: target
          key: ${{ runner.os }}-target-${{ hashFiles('**/Cargo.lock') }}

      - name: Build release binary
        run: cargo build --release --target x86_64-pc-windows-msvc

      - name: Create ZIP archive
        run: |
          cd target/x86_64-pc-windows-msvc/release
          7z a ../../../learnp-${{ needs.get-version.outputs.version }}-x86_64-windows.zip learnp.exe

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: windows-zip
          path: ./learnp-${{ needs.get-version.outputs.version }}-x86_64-windows.zip
          retention-days: 1

  build-windows-installer:
    name: Build Windows Installer
    needs: get-version
    runs-on: windows-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Install cargo-wix
        run: cargo install cargo-wix

      - name: Build release binary
        run: cargo build --release

      - name: Create WiX installer
        run: cargo wix --nocapture

      - name: Find MSI file
        id: find_msi
        shell: pwsh
        run: |
          $MSI_FILE = Get-ChildItem -Path target/wix/*.msi | Select-Object -First 1
          $MSI_NAME = $MSI_FILE.Name
          echo "path=$($MSI_FILE.FullName)" >> $env:GITHUB_OUTPUT
          echo "name=$MSI_NAME" >> $env:GITHUB_OUTPUT

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: windows-installer
          path: ${{ steps.find_msi.outputs.path }}
          retention-days: 1

  build-macos:
    name: Build macOS
    needs: get-version
    runs-on: macos-latest
    strategy:
      matrix:
        target:
          - x86_64-apple-darwin
          - aarch64-apple-darwin
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Cache cargo registry
        uses: actions/cache@v3
        with:
          path: ~/.cargo/registry
          key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}

      - name: Cache cargo index
        uses: actions/cache@v3
        with:
          path: ~/.cargo/git
          key: ${{ runner.os }}-cargo-git-${{ hashFiles('**/Cargo.lock') }}

      - name: Cache target directory
        uses: actions/cache@v3
        with:
          path: target
          key: ${{ runner.os }}-${{ matrix.target }}-target-${{ hashFiles('**/Cargo.lock') }}

      - name: Build release binary
        run: cargo build --release --target ${{ matrix.target }}

      - name: Strip binary
        run: strip target/${{ matrix.target }}/release/learnp

      - name: Create tarball
        run: |
          cd target/${{ matrix.target }}/release
          tar czf learnp-${{ needs.get-version.outputs.version }}-${{ matrix.target }}.tar.gz learnp
          mv learnp-${{ needs.get-version.outputs.version }}-${{ matrix.target }}.tar.gz ../../../

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: macos-${{ matrix.target }}
          path: ./learnp-${{ needs.get-version.outputs.version }}-${{ matrix.target }}.tar.gz
          retention-days: 1

  build-macos-universal:
    name: Build macOS Universal Binary
    needs: [get-version, build-macos]
    runs-on: macos-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: x86_64-apple-darwin,aarch64-apple-darwin

      - name: Build both architectures
        run: |
          cargo build --release --target x86_64-apple-darwin
          cargo build --release --target aarch64-apple-darwin

      - name: Create universal binary
        run: |
          lipo -create \
            target/x86_64-apple-darwin/release/learnp \
            target/aarch64-apple-darwin/release/learnp \
            -output learnp-universal
          strip learnp-universal

      - name: Create tarball
        run: |
          tar czf learnp-${{ needs.get-version.outputs.version }}-universal-apple-darwin.tar.gz learnp-universal

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: macos-universal
          path: ./learnp-${{ needs.get-version.outputs.version }}-universal-apple-darwin.tar.gz
          retention-days: 1

  create-release:
    name: Create Release
    needs: [get-version, build-linux, build-deb, build-rpm, build-windows, build-windows-installer, build-macos, build-macos-universal]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Generate changelog
        id: changelog
        run: |
          # Get previous tag
          PREV_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")

          if [ -z "$PREV_TAG" ]; then
            # First release - get all commits
            CHANGELOG=$(git log --pretty=format:"- %s (%h)" --no-merges)
          else
            # Get commits since last tag
            CHANGELOG=$(git log ${PREV_TAG}..HEAD --pretty=format:"- %s (%h)" --no-merges)
          fi

          # Save to file
          echo "## What's Changed" > CHANGELOG.md
          echo "" >> CHANGELOG.md
          echo "$CHANGELOG" >> CHANGELOG.md

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Display structure of downloaded files
        run: ls -R artifacts

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ needs.get-version.outputs.version }}
          name: Release ${{ needs.get-version.outputs.version }}
          body_path: CHANGELOG.md
          draft: false
          prerelease: ${{ (github.event_name == 'workflow_dispatch' && inputs.prerelease) || contains(github.ref, 'alpha') || contains(github.ref, 'beta') || contains(github.ref, 'rc') }}
          files: |
            artifacts/**/*
